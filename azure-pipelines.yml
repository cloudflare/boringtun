jobs:

- job: Windows
  displayName: 'Windows'
  pool:
    vmImage: 'vs2017-win2016'
  continueOnError: true
  steps:
  - script: |
      curl -sSf -o rustup-init.exe https://win.rustup.rs
      rustup-init.exe -y --default-toolchain stable --default-host x86_64-pc-windows-msvc
      echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
    displayName: 'Install Rust'
  - script: |
      cargo build --lib --no-default-features
    displayName: 'Build library'
  - script: |
      cargo test --lib --no-default-features
    displayName: 'Test library'

- job: macOS_x86_64
  displayName: 'macOS x86-64'
  pool:
    name: Self Hosted ARM
    demands: agent.name -equals intelmac
  continueOnError: true
  steps:
  - template: ci/azure-build.yml
  - script: |
      export PATH=$PATH:$HOME/.cargo/bin
      rustup target add aarch64-apple-ios
      cargo build --lib --no-default-features --target aarch64-apple-ios
    displayName: 'Build library for iOS'
  - script: |
      export PATH=$PATH:$HOME/.cargo/bin
      rustup component add rustfmt
      cargo fmt --all -- --check
    displayName: 'Cargo fmt'

- job: macOS_arm64
  displayName: 'macOS arm64'
  pool:
    name: Self Hosted ARM
    demands: agent.name -equals m1mac
  continueOnError: true
  steps:
  - template: ci/azure-build.yml
  - script: |
      export PATH=$PATH:$HOME/.cargo/bin
      rustup target add aarch64-apple-ios
      cargo build --lib --no-default-features --target aarch64-apple-ios
    displayName: 'Build library for iOS'
  - script: |
      export PATH=$PATH:$HOME/.cargo/bin
      rustup component add rustfmt
      cargo fmt --all -- --check
    displayName: 'Cargo fmt'

- job: Linux_x86_64
  displayName: 'Linux x86-64'
  pool:
    vmImage: 'ubuntu-20.04'
  continueOnError: true
  steps:
  - script: |
      sudo apt-get update
      sudo apt-get install wireguard -y
    displayName: 'Install wireguard'
  - script: |
      sudo apt-get install jq -y
      sudo sh -c "cat /etc/docker/daemon.json | jq --arg cidr \"2001:db8:1::/64\" '. + {ipv6: true, \"fixed-cidr-v6\": \$cidr}' > temp.txt"
      sudo mv temp.txt /etc/docker/daemon.json
      sudo systemctl restart docker
    displayName: 'Fix docker'
  - template: ci/azure-build.yml
  - script: |
      export PATH=$PATH:$HOME/.cargo/bin
      rustup component add rustfmt
      cargo fmt --all -- --check
    displayName: 'Cargo fmt'

- job: Linux_aarch64
  displayName: 'Linux aarch64'
  pool:
    name: Self Hosted ARM
    demands: agent.name -equals aarch64
  continueOnError: true
  steps:
  - script: |
      docker stop $(docker ps -aq)
    displayName: 'Fix docker'
  - template: ci/azure-build.yml

- job: Linux_armv7
  displayName: 'Linux armv7'
  pool:
    name: Self Hosted ARM
    demands: agent.name -equals armv7
  continueOnError: true
  steps:
  - script: |
      docker stop $(docker ps -aq)
    displayName: 'Fix docker'
  - template: ci/azure-build.yml

- job: dist_darwin
  displayName: "Create macOS Release"
  pool:
    vmImage: macOS-11
  steps:
    - template: ci/azure-install-rust.yml
    - script: cargo build --release
      env:
        MACOSX_DEPLOYMENT_TARGET: 10.7
    - template: ci/azure-create-release-build.yml
      parameters:
        name: dist_darwin

- job: dist_linux
  displayName: "Create Linux Release"
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
    - template: ci/azure-install-rust.yml
    - script: rustup target add x86_64-unknown-linux-musl
    - script: |
        sudo apt update -y
        sudo apt install musl-tools -y
      displayName: "Install musl-tools"
    - script: |
        set -ex
        cargo build --target x86_64-unknown-linux-musl --release
    - template: ci/azure-create-release-build.yml
      parameters:
        artifacts: target/x86_64-unknown-linux-musl/release
        name: dist_linux

- job: deploy
  dependsOn:
    - dist_darwin
    - dist_linux
  displayName: "Push to GitHub Releases"
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
    - task: DownloadPipelineArtifact@0
      displayName: "Download Linux release"
      inputs:
        artifactName: dist_linux
        targetPath: tmp/linux
    - task: DownloadPipelineArtifact@0
      displayName: "Download macOS release"
      inputs:
        artifactName: dist_darwin
        targetPath: tmp/darwin
    - script: |
        set -ex
        mkdir -p gh-release
        find .
        tag=`git describe --tags`
        mk() {
          target=$1
          src=$2
          name=boringtun-$tag-$target
          mkdir -p tmp/$name
          cp README.md \
            LICENSE.md \
            tmp/$src/boringtun \
            tmp/$name/
          chmod +x tmp/$name/boringtun*
          tar czvf gh-release/$name.tar.gz -C tmp $name
        }
        mk x86_64-unknown-linux-musl linux
        mk x86_64-apple-darwin darwin
      displayName: "Prepare GitHub release tarball"
    - task: PublishPipelineArtifact@0
      displayName: "Publish GitHub release tarball"
      inputs:
        artifactName: gh_release
        targetPath: gh-release
    - task: GithubRelease@0
      condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
      displayName: 'Create GitHub release'
      inputs:
        gitHubConnection: ag_dubs-token
        repositoryName: cloudflare/boringtun
        assets: gh-release/*.tar.gz
