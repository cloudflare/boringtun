# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: MSBuild

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
                  - name: Upload a Build Artifact
  uses: actions/upload-artifact@v3.2.1-node20
  with:
    # Artifact name
    name: # optional, default is artifact
    # A file, directory or wildcard pattern that describes what to upload
    path: 
    # The desired behavior if no files are found using the provided path.
Available Options:
  warn: Output a warning but do not fail the action
  error: Fail the action with an error message
  ignore: Do not output any warnings or errors, the action does not fail

    if-no-files-found: # optional, default is warn
    # Duration after which artifact will expire in days. 0 means using default retention.
Minimum 1 day. Maximum 90 days unless changed from the repository settings page.

    retention-days: # optional
    # If true, hidden files will be included in the uploaded artifact. If false, hidden files will be excluded from the uploaded artifact.

    include-hidden-files: # optional, default is false
                - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v4.0.1
      with:
    # Optional SDK version(s) to use. If not provided, will install global.json version when available. Examples: 2.2.104, 3.1, 3.1.x, 3.x, 6.0.2xx
    dotnet-version: # optional
    # Optional quality of the build. The possible values are: daily, signed, validated, preview, ga.
    dotnet-quality: # optional
    # Optional global.json location, if your global.json isn't located in the root of the repo.
    global-json-file: # optional
    # Optional package source for which to set up authentication. Will consult any existing NuGet.config in the root of the repo and provide a temporary NuGet.config using the NUGET_AUTH_TOKEN environment variable as a ClearTextPassword
    source-url: # optional
    # Optional OWNER for using packages from GitHub Package Registry organizations/users other than the current repository's owner. Only used if a GPR URL is also provided in source-url
    owner: # optional
    # Optional NuGet.config location, if your NuGet.config isn't located in the root of the repo.
    config-file: # optional
    # Optional input to enable caching of the NuGet global-packages folder
    cache: # optional
    # Used to specify the path to a dependency file: packages.lock.json. Supports wildcards or a list of file names for caching multiple dependencies.
    cache-dependency-path: # optional
                - name: Setup Java JDK
  uses: actions/setup-java@v4.3.0
  with:
    # The Java version to set up. Takes a whole or semver Java version. See examples of supported syntax in README file
    java-version: # optional
    # The path to the `.java-version` file. See examples of supported syntax in README file
    java-version-file: # optional
    # Java distribution. See the list of supported distributions in README file
    distribution: 
    # The package type (jdk, jre, jdk+fx, jre+fx)
    java-package: # optional, default is jdk
    # The architecture of the package (defaults to the action runner's architecture)
    architecture: # optional
    # Path to where the compressed JDK is located
    jdkFile: # optional
    # Set this option if you want the action to check for the latest available version that satisfies the version spec
    check-latest: # optional
    # ID of the distributionManagement repository in the pom.xml file. Default is `github`
    server-id: # optional, default is github
    # Environment variable name for the username for authentication to the Apache Maven repository. Default is $GITHUB_ACTOR
    server-username: # optional, default is GITHUB_ACTOR
    # Environment variable name for password or token for authentication to the Apache Maven repository. Default is $GITHUB_TOKEN
    server-password: # optional, default is GITHUB_TOKEN
    # Path to where the settings.xml file will be written. Default is ~/.m2.
    settings-path: # optional
    # Overwrite the settings.xml file if it exists. Default is "true".
    overwrite-settings: # optional, default is true
    # GPG private key to import. Default is empty string.
    gpg-private-key: # optional
    # Environment variable name for the GPG private key passphrase. Default is $GPG_PASSPHRASE.
    gpg-passphrase: # optional
    # Name of the build platform to cache dependencies. It can be "maven", "gradle" or "sbt".
    cache: # optional
    # The path to a dependency file: pom.xml, build.gradle, build.sbt, etc. This option can be used with the `cache` option. If this option is omitted, the action searches for the dependency file in the entire repository. This option supports wildcards and a list of file names for caching multiple dependencies.
    cache-dependency-path: # optional
    # Workaround to pass job status to post job step. This variable is not intended for manual setting
    job-status: # optional, default is ${{ job.status }}
    # The token used to authenticate when fetching version manifests hosted on github.com, such as for the Microsoft Build of OpenJDK. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
    token: # optional, default is ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # Name of Maven Toolchain ID if the default name of "${distribution}_${java-version}" is not wanted. See examples of supported syntax in Advanced Usage file
    mvn-toolchain-id: # optional
    # Name of Maven Toolchain Vendor if the default name of "${distribution}" is not wanted. See examples of supported syntax in Advanced Usage file
    mvn-toolchain-vendor: # optional
                - name: Rainforest QA GitHub Action
  # You may pin to the exact commit or the version.
  # uses: rainforestapp/github-action@5855f2c2427c564554663926b143b9ce3bce17c8
  uses: rainforestapp/github-action@v3.2.5
  with:
    # An arbitrary string to associate with the run
    description: # optional, default is 
    # Only run tests tied to this Run Group
    run_group_id: 
    # Use a specific environment for this run
    environment_id: # optional, default is 
    # Use a specific URL for this run
    custom_url: # optional, default is 
    # How other currently in-progress runs should be handled. Values are `cancel` to cancel runs in the same environment as your new run and `cancel-all` to cancel all runs
    conflict: # optional, default is 
    # The execution method to use for this run
    execution_method: # optional, default is 
    # DEPRECATED: Use `execution_method` instead
    crowd: # optional, default is 
    # Manually entered release information about the release the run is associated with
    release: # optional, default is 
    # If set to a value > 0 and a test fails, it will be retried within the same run, up to that number of times
    automation_max_retries: # optional, default is 
    # Use a specific Rainforest branch for this run
    branch: # optional, default is 
    # Your Rainforest QA API token
    token: 
    # Do not wait for a run to complete before exiting
    background: # optional, default is 
    # Set to true to run parameter validations without starting a new Rainforest run
    dry_run: # optional, default is 
    # The cache key to use for saving/restoring a Rainforest run ID (used to rerun failed tests)
    cache_key: # optional, default is ${{ github.job }}-${{ github.action }}
                - name: Setup Autify Command Line Interface (CLI)
  # You may pin to the exact commit or the version.
  # uses: autifyhq/actions-setup-cli@62decfdbb7902d221d4865ae6170d5dbcd3c90db
  uses: autifyhq/actions-setup-cli@v2.1.2
  with:
    # Shell installer URL
    shell-installer-url: # optional, default is https://autify-cli-assets.s3.amazonaws.com/autify-cli/channels/stable/install-cicd.bash
                - name: Deploy Environment
  # You may pin to the exact commit or the version.
  # uses: parasoft/deploy-environment-action@486e9382c6c2958fcbaad60b895da799d16730c2
  uses: parasoft/deploy-environment-action@1.0.2
  with:
    # CTP URL
    ctpUrl: 
    # CTP Username
    ctpUsername: 
    # CTP Password
    ctpPassword: 
    # Name of the system
    system: 
    # Name of the environment
    environment: 
    # Name of the environment instance to provision
    instance: 
    # Fail action and abort on provisioning failure
    abortOnFailure: # optional
    # Virtual assets in the environment will be replicated on another server
    copyToVirtualize: # optional
    # The environment assets will be copied to a Virtualize server matching this name
    virtServerName: # optional
    # The name for the replicated environment can be used to later destroy the environment
    newEnvironmentName: # optional
    # Duplicate associated data repositories before provisioning
    duplicateDataRepo: # optional
    # Where to duplicate data repository
    duplicateType: # optional
    # The host of the data repository server
    repoHost: # optional
    # The port of the data repository server
    repoPort: # optional
    # The username of the data repository server
    repoUsername: # optional
    # The password of the data repository server
    repoPassword: # optional
                - name: Autify for Web Run Test Plan
  # You may pin to the exact commit or the version.
  # uses: autifyhq/web-run-test-plan-action@d7c3dc4ecacc9e71f48914d12c2b1ab2effbd1c0
  uses: autifyhq/web-run-test-plan-action@v1.0.0
  with:
    # Personal Access Token
    autify_for_web_api_token: 
    # Test Plan ID that you want to run
    test_plan_id: 
    # Test Plan API base URL
    test_plan_api_base_url: # optional, default is https://app.autify.com/api/v1/schedules/
                - name: Autify for Mobile Run Test Plan
  # You may pin to the exact commit or the version.
  # uses: autifyhq/mobile-run-test-plan-action@40bebde5f60117ec81312051028d22238649d280
  uses: autifyhq/mobile-run-test-plan-action@v1.0.0
  with:
    # Personal Access Token
    autify_for_mobile_api_token: 
    # Test Plan ID that you want to run
    test_plan_id: 
    # Build ID that you want to use
    build_id: 
    # Test Plan API base URL
    test_plan_api_base_url: # optional, default is https://mobile-app.autify.com/api/v1/test_plans/
                - name: Rational Integration Tester GitHub Action
  # You may pin to the exact commit or the version.
  # uses: IBM/devopsauto-integrtest-actions@5096cad49a7c728d0de5931481f5567254c70a70
  uses: IBM/devopsauto-integrtest-actions@v1
  with:
    # The fully qualified path to Rational Integration Tester project directory. This value will be ignored if parameterFile field is used.
    projectDir: 
    # The name of the API test project. This value will be ignored if parameterFile field is used.
    projectName: 
    # The API Test environment to use for this execution. This value will be ignored if parameterFile field is used.
    environment: 
    # Semicolon separated list of tests/suites to run. This value will be ignored if parameterFile field is used.
    tests: 
    # The fully qualified path to a parameter file that contains project, environment, and run arguments for one or more tests.
    parameterFile: # optional
    # Specify the folder to export the JUnit reports to.
    junitDir: # optional
                - name: Rational Test Automation Server GitHub Action
  # You may pin to the exact commit or the version.
  # uses: IBM/devopsauto-testserver-actions@c704855bdbbae4f0df152919d00fb0bd40f67ee0
  uses: IBM/devopsauto-testserver-actions@v1
  with:
    # Rational Test Automation Server URL
    serverUrl: 
    # Rational Test Automation Server Offline Token
    offlineToken: 
    # Team Space name
    teamspace: 
    # Project name
    project: 
    # Branch name in which the test exists
    branch: 
    # AssetId of the test in Rational Test Automation Server.
    assetId: 
    # Optional. Test environment corresponding to the test. Mandatory to input the value if you want to run API test.
    environment: # optional
    # Optional. Comma (,) delimited values of datasets for the job to run, For example: source:replacement;source:replacement
    datasets: # optional
    # Optional. Labels corresponding to the test. For example: label1, label2
    labels: # optional
    # Optional. Secrets collection name for the job to run.
    secretsCollection: # optional
    # Optional. Variables corresponding to the test. You must enter the variables in the format: name_of_the_variable=value_of_the_variable
    variables: # optional
                - name: Rational Performance Tester GitHub Action
  # You may pin to the exact commit or the version.
  # uses: IBM/devopsauto-perftest-actions@01df3e50f975ce359966c15da94a9279a2d50504
  uses: IBM/devopsauto-perftest-actions@v1
  with:
    # The complete path to the Eclipse workspace, required if Config File is not specified
    workspace: 
    # The name of a project within the workspace to use, required if Config File is not specified
    project: 
    # Specify the relative path from the project to the test including the file name of the test. A test can be a Performance test, Schedule, or Compound test and required if configFile is not specified.
    suite: 
    # The path to the IMShared folder in your local installation, if it is not at default location. This is where plugins and product dependencies will be located by the execution agent, required if Config File is not specified
    imShared: # optional
    # Use this option to specify the complete path to a file that contains the parameters for a test run. If Config file is specified then no other fields will be required.
    configFile: # optional
    # You can use this option to specify the duration of the stages in the Rate Schedule
    duration: # optional
    # You can use this option to specify the file directory path to store the exported HTTP test log. You can provide multiple parameter entries when running multiple tests. You must use a colon to separate the parameter entries. For example: c:/logexport.txt:c:/secondlogexport.txt
    exportLog: # optional
    # You can use this option to specify a comma-separated list of report IDs along with exportstats or exportstatshtml to list the reports that you want to export in place of the default reports, or the reports selected under Preferences. To retrieve the report IDs, navigate to Window > Preferences > Test > Performance Test Reports > Export Reports from Rational Performance Tester and under Select reports to export, select the required reports, and click Copy ID to clipboard.
    exportStatReportList: 
    # Use this option to provide the complete path to a directory that you can use to store the exported report in a comma-separated values (CSV) format.
    exportStats: # optional
    # Use this option to enter one or more formats for the reports that you want to export by using a comma as a separator. The options are simple.csv, full.csv, simple.json, full.json, csv, and json. When you want to export both simple and full reports in json or csv format, you can specify json or csv as the options. The reports are saved to the location specified in the exportStats field. This field must be used in conjunction with exportStats field.
    exportStatsFormat: 
    # Use this option to provide the complete path to a directory that you can use to export web analytic results. You can analyze the results on a web browser without using Rational Performance Tester.
    exportStatsHtml: 
    # Use this option to add labels to test results. To add multiple labels to a test result, you must separate each label by using a comma.
    labels: # optional
    # Use this option to enable the Resource Monitoring from Service option for a performance schedule if the Resource Monitoring from Service option is not enabled from the schedule editor in Rational Performance Tester, ignore Resource Monitoring sources that were set in the performance schedule and to change for a label matching mode, replace an existing set of Resource Monitoring labels that were set in the performance schedule and run the schedule with a new set of Resource Monitoring labels.
    overrideRmLabels: # optional
    # Determines whether a result file with the same name is overwritten. The default value, false, indicates that the new result file is created. If the value is true, the file is overwritten and retains the same file name.
    overwrite: # optional
    # You can use this option to publish test results to the Server. The format is: serverURL#project.name=projectName&teamspace.name=teamspaceName. If the name of the project or team space contains a special character, then you must replace it with %<Hex_value_of_special_character>.
    publish: # optional
    # Use this option to publish the test results based on the completion status of the tests. The supported values are FAIL,PASS,INCONCLUSIVE,ERROR,ALL.
    publishFor: # optional
    # Use this option to publish specific test results to Rational Test Automation Server. The supported values are STATS, TESTLOG.
    publishReports: # optional
    # Use this option to specify a rate that you want to achieve for a workload in the Rate Runner group. For example, "Rate Runner Group 1=1/s, 3/m", where, Rate Runner Group1 is the name of the rate runner group that has two stages. The desired rate for the first stage is one iteration per second and the rate for the second stage is three iterations per minute.
    rate: # optional
    # Use this option when you want to view a record of all events that occurred during a test or schedule run. Supported values are jaeger, testlog, null
    reportHistory: # optional
    # Use this option to specify the name of the results file. The default name of the result file is the test or schedule name with a timestamp appended. You must specify a folder name that is relative to the project to store the test results.
    results: # optional
    # Use this option to replace dataset values during a test or schedule run. You must ensure that both original and new datasets are in the same workspace and have the same column names. You must also include the path to the dataset. For example, /project_name/ds_path/ds_filename.csv:/project_name/ds_path/new_ds_filename.csv'
    swapDatasets: # optional
    # Use this option to add text that you want to display in the user comments row of the report.
    userComments: # optional
    # Overrides the default number of virtual users in the run. For a schedule, the default is the number of users specified in the schedule editor. For a test, the default is one user.
    users: # optional
    # Use this option to specify the complete path to the XML file that contains the variable initialization.
    varFile: # optional
    # Use this option to specify the Java maximum heap size for the Java process that controls the playback. For example, when you input the value as -Xmx4096m, it specifies the maximum heap size as 4GB.
    vmArgs: # optional
                - name: Rational Performance Tester GitHub Action
  # You may pin to the exact commit or the version.
  # uses: IBM/devopsauto-perftest-actions@01df3e50f975ce359966c15da94a9279a2d50504
  uses: IBM/devopsauto-perftest-actions@v1
  with:
    # The complete path to the Eclipse workspace, required if Config File is not specified
    workspace: 
    # The name of a project within the workspace to use, required if Config File is not specified
    project: 
    # Specify the relative path from the project to the test including the file name of the test. A test can be a Performance test, Schedule, or Compound test and required if configFile is not specified.
    suite: 
    # The path to the IMShared folder in your local installation, if it is not at default location. This is where plugins and product dependencies will be located by the execution agent, required if Config File is not specified
    imShared: # optional
    # Use this option to specify the complete path to a file that contains the parameters for a test run. If Config file is specified then no other fields will be required.
    configFile: # optional
    # You can use this option to specify the duration of the stages in the Rate Schedule
    duration: # optional
    # You can use this option to specify the file directory path to store the exported HTTP test log. You can provide multiple parameter entries when running multiple tests. You must use a colon to separate the parameter entries. For example: c:/logexport.txt:c:/secondlogexport.txt
    exportLog: # optional
    # You can use this option to specify a comma-separated list of report IDs along with exportstats or exportstatshtml to list the reports that you want to export in place of the default reports, or the reports selected under Preferences. To retrieve the report IDs, navigate to Window > Preferences > Test > Performance Test Reports > Export Reports from Rational Performance Tester and under Select reports to export, select the required reports, and click Copy ID to clipboard.
    exportStatReportList: 
    # Use this option to provide the complete path to a directory that you can use to store the exported report in a comma-separated values (CSV) format.
    exportStats: # optional
    # Use this option to enter one or more formats for the reports that you want to export by using a comma as a separator. The options are simple.csv, full.csv, simple.json, full.json, csv, and json. When you want to export both simple and full reports in json or csv format, you can specify json or csv as the options. The reports are saved to the location specified in the exportStats field. This field must be used in conjunction with exportStats field.
    exportStatsFormat: 
    # Use this option to provide the complete path to a directory that you can use to export web analytic results. You can analyze the results on a web browser without using Rational Performance Tester.
    exportStatsHtml: 
    # Use this option to add labels to test results. To add multiple labels to a test result, you must separate each label by using a comma.
    labels: # optional
    # Use this option to enable the Resource Monitoring from Service option for a performance schedule if the Resource Monitoring from Service option is not enabled from the schedule editor in Rational Performance Tester, ignore Resource Monitoring sources that were set in the performance schedule and to change for a label matching mode, replace an existing set of Resource Monitoring labels that were set in the performance schedule and run the schedule with a new set of Resource Monitoring labels.
    overrideRmLabels: # optional
    # Determines whether a result file with the same name is overwritten. The default value, false, indicates that the new result file is created. If the value is true, the file is overwritten and retains the same file name.
    overwrite: # optional
    # You can use this option to publish test results to the Server. The format is: serverURL#project.name=projectName&teamspace.name=teamspaceName. If the name of the project or team space contains a special character, then you must replace it with %<Hex_value_of_special_character>.
    publish: # optional
    # Use this option to publish the test results based on the completion status of the tests. The supported values are FAIL,PASS,INCONCLUSIVE,ERROR,ALL.
    publishFor: # optional
    # Use this option to publish specific test results to Rational Test Automation Server. The supported values are STATS, TESTLOG.
    publishReports: # optional
    # Use this option to specify a rate that you want to achieve for a workload in the Rate Runner group. For example, "Rate Runner Group 1=1/s, 3/m", where, Rate Runner Group1 is the name of the rate runner group that has two stages. The desired rate for the first stage is one iteration per second and the rate for the second stage is three iterations per minute.
    rate: # optional
    # Use this option when you want to view a record of all events that occurred during a test or schedule run. Supported values are jaeger, testlog, null
    reportHistory: # optional
    # Use this option to specify the name of the results file. The default name of the result file is the test or schedule name with a timestamp appended. You must specify a folder name that is relative to the project to store the test results.
    results: # optional
    # Use this option to replace dataset values during a test or schedule run. You must ensure that both original and new datasets are in the same workspace and have the same column names. You must also include the path to the dataset. For example, /project_name/ds_path/ds_filename.csv:/project_name/ds_path/new_ds_filename.csv'
    swapDatasets: # optional
    # Use this option to add text that you want to display in the user comments row of the report.
    userComments: # optional
    # Overrides the default number of virtual users in the run. For a schedule, the default is the number of users specified in the schedule editor. For a test, the default is one user.
    users: # optional
    # Use this option to specify the complete path to the XML file that contains the variable initialization.
    varFile: # optional
    # Use this option to specify the Java maximum heap size for the Java process that controls the playback. For example, when you input the value as -Xmx4096m, it specifies the maximum heap size as 4GB.
    vmArgs: # optional
                - name: 42Crunch API Conformance Scan
  # You may pin to the exact commit or the version.
  # uses: 42Crunch/cicd-github-actions@e2c9a02bb391932aee6ef994de06ff2c7aae9ff6
  uses: 42Crunch/cicd-github-actions@v1
  with:
    # API token to access 42Crunch Platform. Check https://docs.42crunch.com/latest/content/tasks/integrate_github_actions.htm for details
    api-token: 
    # 42Crunch platform URL
    platform-url: # optional, default is https://platform.42crunch.com
    # Path to JSON report from audit step
    audit-report-path: 
    # List of API UUIDs to use
    api-ids: # optional
    # Path to save sarif report, add 'Convert to sarif' stage
    convert-to-sarif: # optional
    # Add 'Upload sarif' and 'Convert to sarif' stage
    upload-sarif: # optional
    # Add 'Check sqg' stage
    check-sqg: # optional
    # GitHub token for uploading results to Github Code Scanning
    github-token: # optional, default is ${{ github.token }}
                - name: Probely DAST for Security Scans
  # You may pin to the exact commit or the version.
  # uses: Probely/probely-github-action@57264e5cafb33371168943413f91d1fd3792b210
  uses: Probely/probely-github-action@v1.0.0
  with:
    # Probely's API Key
    api-key: 
    # Probely's identifier of the target to scan
    target-id: 
    # Probely's region where your account is hosted
    region: # optional, default is eu
    # The scan profile to use in the scan. If not defined, the scan profile will be the one defined in the target settings.
    scan-profile: # optional, default is 
    # Add additional options to the MSBuild command line here (like platform or verbosity level).
    # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
    run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}
